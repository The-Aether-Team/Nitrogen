plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
    id 'org.parchmentmc.librarian.forgegradle' version '[1,2)'
    id 'org.moddingx.modgradle.mapping' version '[4,5)'
    id 'org.moddingx.modgradle.sourcejar' version '[4,5)' apply false
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'io.github.p03w.machete' version '2.0.1'
}

version = "${mc_version}-${mod_version}-neoforge"
group = 'com.aetherteam.nitrogen'

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

apply plugin: 'org.moddingx.modgradle.sourcejar'

minecraft {
    mappings channel: 'sugarcane', version: project.mappings

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property "${mod_id}.iside", 'true'

            property 'forge.logging.console.level', 'info'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id

            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/')

            environment 'target', 'fmluserdevdata'
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

processResources {
    exclude '.cache/'
}

machete {
    jij.enabled = false
    json.enabled = true
    png.enabled = false
    sourceFileStriping.enabled = false
    lvtStriping.enabled = false
}

tasks.jar.finalizedBy('optimizeOutputsOfJar')

dependencies {
    minecraft "net.neoforged:forge:${project.mc_version}-${project.neoforge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly "mezz.jei:jei-${project.mc_version}-common:${project.jei_version}"
    compileOnly "mezz.jei:jei-${project.mc_version}-forge:${project.jei_version}"

    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-api-forge:$rei_version")
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:$rei_version")

    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:$cloth_config_version")
    compileOnly fg.deobf("dev.architectury:architectury-forge:$architectury_version")
}

repositories {
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.architectury.dev/" }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : "The Aether Team",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "The Aether Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.named(sourceSets.main.compileJavaTaskName) {
    outputs.file("${it.temporaryDir}/${it.name}-refmap.json").withPropertyName("mixin refmap")
}

compileJava {
    options.incremental = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact jar
            artifact sourceJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/The-Aether-Team/Nitrogen"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

mixin {
    config "${project.mod_id}.mixins.json"
    add sourceSets.main, "${project.mod_id}.refmap.json"
}
