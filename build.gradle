plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.108'
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'com.matthewprenger.cursegradle' version '[1.4,1.5)'
    id 'com.modrinth.minotaur' version '[2,3)'
}

version = "${mc_version}-${mod_version}-neoforge"
group = 'com.aetherteam.nitrogen'

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    configureEach {
        workingDirectory project.file('run')
        systemProperty "${mod_id}.iside", 'true'
        systemProperty  'forge.logging.console.level', 'info'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
    }

    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing', file('src/generated/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

subsystems {
    parchment {
        minecraftVersion = project.mc_version
        mappingsVersion = project.mappings
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neoforge_version}"

//    compileOnly "mezz.jei:jei-${project.mc_version}-common:${project.jei_version}"
//    compileOnly "mezz.jei:jei-${project.mc_version}-forge:${project.jei_version}"

    compileOnly "me.shedaniel:RoughlyEnoughItems-api-forge:$rei_version"
    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-forge:$rei_version"

    compileOnly "me.shedaniel.cloth:cloth-config-forge:$cloth_config_version"
    compileOnly "dev.architectury:architectury-forge:$architectury_version"
}

repositories {
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.architectury.dev/" }
}

//processResources {
//    exclude '.cache/'
//}
//
//machete {
//    jij.enabled = false
//    json.enabled = true
//    png.enabled = false
//    sourceFileStriping.enabled = false
//    lvtStriping.enabled = false
//}
//
//tasks.jar.finalizedBy('optimizeOutputsOfJar')

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : "The Aether Team",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "The Aether Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

compileJava {
    options.incremental = false
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact project.jar
            artifact project.sourceJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/The-Aether-Team/Nitrogen"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
