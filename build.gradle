plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
    id 'com.matthewprenger.cursegradle' version '[1.4,1.5)'
    id 'com.modrinth.minotaur' version '[2,3)'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = "${minecraft_version}-${mod_version}-neoforge"
group = mod_group

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty  'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
    }

    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing', file('src/generated/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neo_version}"

    compileOnly "mezz.jei:jei-${project.minecraft_version}-common:${project.jei_version}"
    compileOnly "mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}"

    compileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:${project.rei_version}"
    compileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:${project.rei_version}"

    compileOnly "me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}"
    compileOnly "dev.architectury:architectury-neoforge:${project.architectury_version}"
}

repositories {
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.architectury.dev/" }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
        mod_id                 : mod_id,
        mod_name               : mod_name,
        mod_version            : mod_version,
        mod_license            : mod_license,
        mod_url                : mod_url,
        mod_tracker            : mod_tracker,
        mod_credits            : mod_credits,
        mod_authors            : mod_authors,
        mod_description        : mod_description,
        minecraft_version      : minecraft_version,
        minecraft_version_range: minecraft_version_range,
        neo_version            : neo_version,
        neo_version_range      : neo_version_range,
        loader_version_range   : loader_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

compileJava {
    options.incremental = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            artifact project.jar
            artifact project.sourceJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/The-Aether-Team/Nitrogen"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
